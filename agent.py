#!/usr/bin/env python3
"""
Agente LLM automatizado utilizando LangGraph y AWS Bedrock Claude 4
para generar documentaci√≥n funcional de c√≥digo de forma aut√≥noma.
"""

import os
import sys
import boto3
import logging
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv

from langchain_aws import ChatBedrockConverse
from langgraph.prebuilt import create_react_agent
from langgraph.checkpoint.memory import InMemorySaver

# Importar herramientas desde el paquete tools
from tools import all_tools

# Importar configuraci√≥n de logging
from logging_config import get_config

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n de AWS Bedrock
REGION_NAME = os.getenv("AWS_REGION", "us-east-1")
MODEL_ID = "us.anthropic.claude-sonnet-4-20250514-v1:0"  # Modelo Claude 4 Sonnet

# Variable global para el directorio del repositorio
REPOSITORY_PATH = None

def configurar_logging(mode: str = "normal"):
    """Configura el sistema de logging para el agente con niveles optimizados."""
    
    # Obtener configuraci√≥n seg√∫n el modo
    config = get_config(mode)
    
    # Crear directorio de logs si no existe
    logs_dir = Path("logs")
    logs_dir.mkdir(exist_ok=True)
    
    # Nombre del archivo de log con timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    log_file = logs_dir / f"agente_documentador_{timestamp}.log"
    
    # Configurar el logger principal
    logger = logging.getLogger("AgenteLLM")
    logger.setLevel(config["AGENT_LEVEL"])
    
    # Limpiar handlers existentes
    for handler in logger.handlers[:]:
        logger.removeHandler(handler)
    
    # Formatter simplificado para consola
    console_formatter = logging.Formatter(
        '%(asctime)s | %(levelname)-8s | %(message)s',
        datefmt=config["CONSOLE_TIME_FORMAT"]
    )
    
    # Formatter detallado para archivo
    file_formatter = logging.Formatter(
        '%(asctime)s | %(levelname)-8s | %(name)-12s | %(message)s',
        datefmt=config["FILE_TIME_FORMAT"]
    )
    
    # Handler para archivo
    file_handler = logging.FileHandler(log_file, encoding='utf-8')
    file_handler.setLevel(config["FILE_LEVEL"])
    file_handler.setFormatter(file_formatter)
    logger.addHandler(file_handler)
    
    # Handler para consola
    console_handler = logging.StreamHandler()
    console_handler.setLevel(config["CONSOLE_LEVEL"])
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)
    
    # Configurar loggers espec√≠ficos
    
    # Logger para herramientas
    tools_logger = logging.getLogger("Herramientas")
    tools_logger.setLevel(config["TOOLS_LEVEL"])
    tools_logger.addHandler(file_handler)
    if config["TOOLS_LEVEL"] <= config["CONSOLE_LEVEL"]:
        tools_logger.addHandler(console_handler)
    
    # Logger para pensamiento del agente
    thinking_logger = logging.getLogger("Pensamiento")
    thinking_logger.setLevel(config["THINKING_LEVEL"])
    thinking_logger.addHandler(file_handler)
    if config["THINKING_LEVEL"] <= config["CONSOLE_LEVEL"]:
        thinking_logger.addHandler(console_handler)
    
    # Suprimir logs verbosos de librer√≠as externas si est√° configurado
    if config["SUPPRESS_EXTERNAL_LIBS"]:
        logging.getLogger("boto3").setLevel(logging.WARNING)
        logging.getLogger("botocore").setLevel(logging.WARNING)
        logging.getLogger("urllib3").setLevel(logging.WARNING)
        logging.getLogger("langchain").setLevel(logging.WARNING)
        logging.getLogger("langgraph").setLevel(logging.WARNING)
    
    return logger, log_file

def configurar_herramientas_para_repositorio(repository_path: str):
    """
    Configura las herramientas para trabajar √∫nicamente en el repositorio especificado.
    
    Args:
        repository_path: Ruta absoluta al repositorio que se debe documentar.
    """
    global REPOSITORY_PATH
    REPOSITORY_PATH = Path(repository_path).resolve()
    
    # Configurar variable de entorno para que las herramientas la usen
    os.environ['DOCUMENTATOR_REPOSITORY_PATH'] = str(REPOSITORY_PATH)
    
    return REPOSITORY_PATH

def mostrar_progreso(mensaje: str, tipo: str = "info"):
    """Muestra mensajes de progreso de forma clara y concisa."""
    iconos = {
        "inicio": "üöÄ",
        "progreso": "‚öôÔ∏è",
        "exito": "‚úÖ",
        "error": "‚ùå",
        "info": "‚ÑπÔ∏è"
    }
    icono = iconos.get(tipo, "‚ÑπÔ∏è")
    print(f"{icono} {mensaje}")

def crear_agente_con_logging(repository_path: str, logging_mode: str = "normal"):
    """Crea y retorna un agente LLM con herramientas y logging completo."""
    
    # Configurar logging
    logger, log_file = configurar_logging(logging_mode)
    thinking_logger = logging.getLogger("Pensamiento")
    
    logger.info("üöÄ INICIANDO AGENTE DOCUMENTADOR")
    logger.info(f"üìÅ Archivo de log: {log_file}")
    logger.info(f"ü§ñ Modelo: {MODEL_ID}")
    logger.info(f"üåç Regi√≥n AWS: {REGION_NAME}")
    
    # Configurar herramientas para el repositorio espec√≠fico
    repo_path = configurar_herramientas_para_repositorio(repository_path)
    logger.info(f"üìÇ Repositorio objetivo: {repo_path}")
    
    # Verificar que el repositorio existe
    if not repo_path.exists():
        raise ValueError(f"‚ùå El repositorio especificado no existe: {repo_path}")
    
    if not repo_path.is_dir():
        raise ValueError(f"‚ùå La ruta especificada no es un directorio: {repo_path}")
    
    logger.info(f"‚úÖ Repositorio verificado exitosamente")
    
    # Configurar el cliente de AWS Bedrock
    logger.debug("üîß Configurando cliente AWS Bedrock...")
    session = boto3.Session(region_name=REGION_NAME)
    bedrock_client = session.client(
        service_name="bedrock-runtime",
        region_name=REGION_NAME
    )
    
    # Configurar el modelo de Claude 4 Sonnet con ChatBedrockConverse
    logger.debug("üß† Configurando modelo Claude 4 Sonnet...")
    model = ChatBedrockConverse(
        client=bedrock_client,
        model_id=MODEL_ID,
        temperature=0,
        max_tokens=4000
    )
    
    # Usar las herramientas originales sin wrapper
    logger.info(f"üõ†Ô∏è  Configurando {len(all_tools)} herramientas...")
    for tool in all_tools:
        tool_name = getattr(tool, 'name', str(tool))
        logger.debug(f"   ‚úì Herramienta disponible: {tool_name}")
    
    # Configurar el checkpointer para memoria
    logger.debug("üíæ Configurando memoria del agente...")
    checkpointer = InMemorySaver()
    
    # Prompt mejorado con instrucciones de logging y repositorio espec√≠fico
    prompt_con_logging = f"""
        
        <persona>
        Act√∫a como un especialista en producto y documentaci√≥n funcional. Tienes m√°s de 15 a√±os de experiencia traduciendo sistemas complejos en documentaci√≥n comprensible para √°reas comerciales, clientes, usuarios finales y equipos de ventas. Sabes c√≥mo interpretar c√≥digo para extraer funcionalidades clave, procesos de negocio y reglas funcionales reales y verificables.
        </persona>

        <objetivo>
        Tu objetivo es generar un manual funcional del sistema a partir del an√°lisis directo del c√≥digo fuente de un repositorio. Este manual debe:
        - Incluir una vista panor√°mica general del sistema.
        - Documentar los m√≥dulos funcionales m√°s importantes.
        - Usar lenguaje claro, accesible y orientado al negocio.
        - Ser completamente fidedigno: jam√°s debes inventar o suponer informaci√≥n que no est√© expl√≠citamente representada en el c√≥digo. Si algo no puede ser determinado con certeza, ind√≠calo claramente como ausencia de informaci√≥n.
        </objetivo>

        <restricciones>
        - Trabaja exclusivamente con los archivos ubicados en la ruta: {repo_path}.
        - No analices archivos fuera de esta ruta.
        - No edites ni modifiques el c√≥digo.
        - Solo documenta lo que puedas confirmar con evidencia clara del c√≥digo.
        - Si una herramienta falla, no la reintentes m√°s de una vez.
        </restricciones>

        <estilo>
        - Siempre responde en espa√±ol.
        - Usa formato Markdown para toda la documentaci√≥n generada.
        - Usa etiquetas estructuradas como <section>, <modulo>, <regla> internamente si lo necesitas para organizar el razonamiento y generar contenido consistente.
        - Mant√©n consistencia estructural entre m√≥dulos.
        - Puedes usar hasta 3500 tokens por archivo Markdown. S√© tan detallado como sea necesario.
        </estilo>

        <estilo_adicional>
        IMPORTANTE: La documentaci√≥n debe estar redactada en lenguaje funcional, natural y orientado al negocio. Bajo ninguna circunstancia debes incluir:

        - Nombres de variables, atributos o campos internos (como balanceType, clientId, reminderStatusId, etc.).
        - Identificadores num√©ricos o valores de enums.
        - Fragmentos de c√≥digo, objetos JSON o estructuras de datos t√©cnicas.
        - Nombres de modelos, clases o interfaces (por ejemplo, no mencionar clientModel, contact[], documents[]).

        En su lugar, traduce toda la informaci√≥n al lenguaje que usar√≠a un usuario de negocio o un cliente. Por ejemplo:

        - ‚ùå Incorrecto: reminderStatusId: 3
        - ‚úÖ Correcto: "Recordatorios que no pudieron ser enviados por un error"

        - ‚ùå Incorrecto: clientIdentificationValue
        - ‚úÖ Correcto: "RUT del cliente"

        - ‚ùå Incorrecto: estructura de objeto con claves
        - ‚úÖ Correcto: "Cada cliente tiene un nombre, contactos asociados y un historial de pagos"

        Si una regla est√° basada en un ID o c√≥digo interno, no lo muestres. Describe el comportamiento que ese ID representa de manera natural. El lector de esta documentaci√≥n no tiene contexto t√©cnico ni debe tenerlo.
        </estilo_adicional>

        <estructura_global>
        1. Genera un archivo inicial: 01_resumen_general.md
        Este archivo debe incluir:
        - # Vista general del sistema
        - ## ¬øQu√© funcionalidades ofrece este sistema?
        - ## ¬øA qui√©n est√° dirigido este sistema?
        - ## ¬øQu√© valor aporta al negocio?
        - ## Lista de m√≥dulos funcionales identificados
            - Formato: - [Nombre del m√≥dulo] ‚Üí archivo: 02_modulo_[slug].md

        2. Para cada m√≥dulo funcional detectado, genera un archivo nombrado: 02_modulo_[slug-del-nombre-del-modulo].md

        Usa esta estructura Markdown para cada m√≥dulo:
        Secci√≥n: [Nombre del m√≥dulo o funcionalidad]
        ¬øQu√© es esta funcionalidad?
        Explica su prop√≥sito funcional desde una perspectiva de negocio. Si no hay informaci√≥n suficiente, indica:

        "No se encontr√≥ suficiente informaci√≥n en el c√≥digo para completar esta secci√≥n."

        ¬øQu√© puede hacer un usuario aqu√≠?
        Lista las acciones visibles y accesibles para el usuario final. Ejemplo:

        Crear registros

        Buscar y filtrar resultados

        Descargar informes

        ¬øQu√© reglas se aplican?
        <section id="reglas"> Debes ser extremadamente detallado en esta secci√≥n. Puedes usar hasta 3500 tokens si es necesario. Describe exhaustivamente: - Validaciones y restricciones visibles en el c√≥digo. - Flujos de trabajo y procesos de negocio. - Condiciones, permisos y roles expl√≠citos. - L√≥gica de c√°lculos y transformaciones de datos. - Comportamientos especiales o excepciones. - Integraciones o dependencias entre m√≥dulos. - Cualquier l√≥gica funcional relevante observable en el c√≥digo. Usa ejemplos reales solo si puedes deducirlos directamente. No incluyas identificadores ni estructuras internas. </section>
        ¬øPor qu√© es √∫til esta funcionalidad?
        Describe el valor comercial o funcional del m√≥dulo, si est√° claramente inferido del c√≥digo.

        markdown
        Copy
        Edit

        3. Si detectas secciones sin informaci√≥n suficiente:
        - Decl√°ralo en la secci√≥n correspondiente del Markdown.
        - Adem√°s, registra ese hallazgo en un archivo llamado: 99_resumen_puntos_sin_documentar.md
        - Ejemplo:
            - M√≥dulo: Reportes de desempe√±o ‚Üí No se encontr√≥ informaci√≥n suficiente sobre las acciones del usuario ni reglas aplicadas.
        </estructura_global>

        <flujo_de_trabajo>
        1. Realiza una exploraci√≥n inicial del repositorio para detectar los m√≥dulos funcionales clave.
        2. Genera 01_resumen_general.md con la vista panor√°mica del sistema.
        3. Luego, para cada m√≥dulo identificado, crea su archivo correspondiente seg√∫n la estructura dada.
        4. No te detengas hasta haber documentado todos los m√≥dulos relevantes.
        </flujo_de_trabajo>

        <importante>
        Toma una respiraci√≥n profunda y trabaja en este problema paso a paso.
        </importante>
        """
    
    # Crear un agente usando langgraph
    logger.debug("ü§ñ Creando agente con LangGraph...")
    agent = create_react_agent(
        model=model,
        tools=all_tools,  # Usar herramientas originales
        prompt=prompt_con_logging,
        checkpointer=checkpointer,
        debug=False,  # Activar modo debug para m√°s informaci√≥n
    )
    
    logger.info("‚úÖ Agente creado exitosamente con logging completo")
    
    return agent, logger, thinking_logger

def main(repository_path: str = None, logging_mode: str = "normal"):
    """
    Funci√≥n principal para ejecutar el agente de forma autom√°tica.
    
    Args:
        repository_path: Ruta al repositorio que se debe documentar.
                        Si no se proporciona, se toma del primer argumento de l√≠nea de comandos.
        logging_mode: Modo de logging ("normal", "debug", "quiet").
    """
    
    mostrar_progreso("Iniciando agente documentador autom√°tico", "inicio")
    mostrar_progreso(f"Repositorio objetivo: {repository_path}", "info")
    mostrar_progreso("El agente analizar√° el c√≥digo y generar√° documentaci√≥n funcional", "info")
    mostrar_progreso("Este proceso puede tomar varios minutos dependiendo del tama√±o del proyecto", "info")
    print("-" * 70)
    
    try:
        # Crear el agente con logging
        agente, logger, thinking_logger = crear_agente_con_logging(repository_path, logging_mode)
        
        # Configuraci√≥n para la sesi√≥n
        thread_id = "documentacion_automatica"
        config = {
            "configurable": {"thread_id": thread_id},
            "recursion_limit": 150  # Aumentar l√≠mite de recursi√≥n para tareas intensivas
        }
        
        logger.info(f"üéØ Iniciando sesi√≥n de documentaci√≥n (ID: {thread_id})")
        
        # Mensaje inicial para activar el agente
        mensaje_inicial = f"""
        Comienza tu trabajo de documentaci√≥n funcional. Analiza el c√≥digo del repositorio ubicado en: {repository_path}
        
        Genera la documentaci√≥n seg√∫n tus instrucciones. Recuerda que eres completamente aut√≥nomo y debes seguir tu flujo de trabajo paso a paso.
        
        IMPORTANTE: 
        - Trabaja √öNICAMENTE con archivos del repositorio especificado
        - Mant√©n un flujo narrativo claro explicando qu√© herramientas usas y por qu√©
        - Todas las herramientas est√°n configuradas para trabajar en el directorio correcto
        """
        
        logger.info("üì§ Enviando instrucciones iniciales al agente...")
        thinking_logger.info("üí≠ INICIO DEL PROCESO DE DOCUMENTACI√ìN")
        
        # Ejecutar el agente
        respuesta = agente.invoke(
            {"messages": [{"role": "user", "content": mensaje_inicial}]},
            config
        )
        
        logger.info("‚úÖ El agente ha completado su trabajo de documentaci√≥n.")
        logger.info("üìÅ Revisa los archivos Markdown generados en el directorio del proyecto.")
        thinking_logger.info("üí≠ PROCESO DE DOCUMENTACI√ìN COMPLETADO")
        
        mostrar_progreso("El agente ha completado su trabajo de documentaci√≥n", "exito")
        mostrar_progreso("Revisa los archivos Markdown generados en el directorio del proyecto", "info")
        mostrar_progreso(f"Logs detallados disponibles en: logs/", "info")
        
    except KeyboardInterrupt:
        mostrar_progreso("Proceso interrumpido por el usuario", "error")
        if 'logger' in locals():
            logger.warning("‚ö†Ô∏è Proceso interrumpido por el usuario")
    except Exception as e:
        mostrar_progreso(f"Error durante la ejecuci√≥n: {e}", "error")
        mostrar_progreso(f"Tipo de error: {type(e).__name__}", "error")
        if 'logger' in locals():
            logger.error(f"‚ùå Error durante la ejecuci√≥n: {e}")
            logger.error(f"üîß Tipo de error: {type(e).__name__}")
        import traceback
        print("\nüìã Detalles del error:")
        traceback.print_exc()

if __name__ == "__main__":
    # Obtener la ruta del repositorio desde argumentos de l√≠nea de comandos
    if len(sys.argv) < 2:
        print("‚ùå Error: Debes proporcionar la ruta del repositorio como argumento.")
        print("üìã Uso: python agent.py <ruta_del_repositorio>")
        print("üìã Ejemplo: python agent.py \"C:\\Users\\usuario\\mi_proyecto\"")
        sys.exit(1)
    
    repository_path = sys.argv[1]
    
    # Verificar si se especific√≥ un modo de logging
    logging_mode = "normal"
    if len(sys.argv) > 2:
        logging_mode = sys.argv[2]
    
    main(repository_path, logging_mode) 