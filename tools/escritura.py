"""
Herramientas de escritura de archivos para el agente LLM.
Este m√≥dulo contiene herramientas para crear y escribir archivos Markdown y otros documentos.
"""

import os
import logging
from pathlib import Path
from datetime import datetime
from typing import Optional
from langchain.agents import tool

# Configurar logger espec√≠fico para escritura
logger = logging.getLogger("Herramientas.Escritura")

def obtener_ruta_repositorio() -> Path:
    """
    Obtiene la ruta del repositorio configurada desde la variable de entorno.
    
    Returns:
        Path: Ruta absoluta al repositorio objetivo.
    """
    repo_path = os.getenv('DOCUMENTATOR_REPOSITORY_PATH')
    if not repo_path:
        raise ValueError("‚ùå No se ha configurado la ruta del repositorio. Variable DOCUMENTATOR_REPOSITORY_PATH no encontrada.")
    
    path = Path(repo_path)
    if not path.exists():
        raise ValueError(f"‚ùå El repositorio configurado no existe: {path}")
    
    return path

def validar_ruta_escritura_en_repositorio(ruta: str) -> Path:
    """
    Valida que una ruta de escritura est√© dentro del repositorio configurado.
    Para escritura, permitimos crear archivos en el directorio actual del documentador.
    
    Args:
        ruta: Ruta a validar (puede ser relativa o absoluta).
        
    Returns:
        Path: Ruta absoluta validada para escritura.
    """
    # Para archivos de documentaci√≥n, permitimos escribir en el directorio actual
    # (donde est√° el documentador) o en el repositorio objetivo
    
    target_path = Path(ruta)
    
    # Si es una ruta relativa, la resolvemos desde el directorio actual
    if not target_path.is_absolute():
        target_path = Path.cwd() / ruta
    
    # Resolver la ruta para eliminar .. y .
    target_path = target_path.resolve()
    
    logger.debug(f"üìç Ruta de escritura validada: {target_path}")
    
    return target_path

@tool
def escribir_markdown(ruta_archivo: str, contenido: str, sobrescribir: bool = False) -> str:
    """
    Escribe contenido en un archivo Markdown (.md) en el directorio de trabajo del documentador.
    
    Args:
        ruta_archivo: Ruta donde crear el archivo Markdown (debe terminar en .md).
        contenido: Contenido en formato Markdown a escribir en el archivo.
        sobrescribir: Si True, sobrescribe el archivo si ya existe. Si False, devuelve error si existe.
        
    Returns:
        String confirmando la creaci√≥n del archivo o mensaje de error.
    """
    logger.info(f"üìù Iniciando escritura de archivo Markdown: {ruta_archivo}")
    logger.debug(f"   üìè Tama√±o del contenido: {len(contenido)} caracteres")
    logger.debug(f"   üîÑ Sobrescribir: {sobrescribir}")
    
    try:
        # Validar la ruta de escritura
        archivo_path = validar_ruta_escritura_en_repositorio(ruta_archivo)
        
        # Verificar que la extensi√≥n sea .md
        if archivo_path.suffix.lower() != '.md':
            logger.error(f"‚ùå Extensi√≥n incorrecta: {archivo_path.suffix} (debe ser .md)")
            return f"Error: El archivo debe tener extensi√≥n .md, recibido: {archivo_path.suffix}"
        
        # Verificar si el archivo ya existe
        if archivo_path.exists() and not sobrescribir:
            logger.warning(f"‚ö†Ô∏è Archivo ya existe y sobrescribir=False: {ruta_archivo}")
            return f"Error: El archivo '{ruta_archivo}' ya existe. Usa sobrescribir=True para reemplazarlo."
        
        # Crear directorios padre si no existen
        if not archivo_path.parent.exists():
            logger.debug(f"üìÅ Creando directorios padre: {archivo_path.parent}")
            archivo_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Escribir el contenido
        logger.debug("‚úçÔ∏è Escribiendo contenido al archivo...")
        with open(archivo_path, 'w', encoding='utf-8') as file:
            file.write(contenido)
        
        # Obtener informaci√≥n del archivo creado
        tama√±o = archivo_path.stat().st_size
        lineas = contenido.count('\n') + 1
        
        logger.info(f"‚úÖ Archivo creado exitosamente:")
        logger.info(f"   üìÑ Archivo: {archivo_path}")
        logger.info(f"   üìè Tama√±o: {tama√±o} bytes")
        logger.info(f"   üìù L√≠neas: {lineas}")
        
        resultado = f"‚úÖ Archivo Markdown creado exitosamente:\n\n"
        resultado += f"üìÑ Archivo: {archivo_path}\n"
        resultado += f"üìè Tama√±o: {tama√±o} bytes\n"
        resultado += f"üìù L√≠neas: {lineas}\n"
        resultado += f"üìÅ Directorio: {archivo_path.parent}\n"
        resultado += f"üïí Creado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        
        if sobrescribir and archivo_path.exists():
            resultado += f"‚ö†Ô∏è  Archivo existente fue sobrescrito.\n"
            logger.info("üîÑ Archivo existente sobrescrito")
        
        return resultado
        
    except ValueError as e:
        logger.error(f"‚ùå Error de validaci√≥n: {str(e)}")
        return str(e)
    except PermissionError:
        logger.error(f"‚ùå Sin permisos para escribir: {ruta_archivo}")
        return f"Error: Sin permisos para escribir en '{ruta_archivo}'."
    except Exception as e:
        logger.error(f"‚ùå Error inesperado: {str(e)}")
        return f"Error inesperado al escribir '{ruta_archivo}': {str(e)}"


@tool
def crear_documentacion_repositorio(nombre_archivo: str = "ANALISIS_REPOSITORIO.md") -> str:
    """
    Crea un archivo de documentaci√≥n completo del repositorio basado en an√°lisis autom√°tico.
    
    Args:
        nombre_archivo: Nombre del archivo de documentaci√≥n a crear.
        
    Returns:
        String confirmando la creaci√≥n del archivo de documentaci√≥n.
    """
    logger.info(f"üìã Creando documentaci√≥n del repositorio: {nombre_archivo}")
    
    try:
        # Obtener la ruta del repositorio
        repo_path = obtener_ruta_repositorio()
        
        # Importar herramientas necesarias
        from tools.estadisticas import estadisticas_repositorio
        from tools.navegacion import listar_directorio, encontrar_archivos
        
        logger.debug("üìä Obteniendo estad√≠sticas del repositorio...")
        # Obtener estad√≠sticas del repositorio (usando "." como directorio base relativo)
        stats = estadisticas_repositorio(".")
        
        logger.debug("üìÅ Obteniendo estructura principal...")
        # Obtener estructura principal
        estructura = listar_directorio(".")
        
        logger.debug("üîç Buscando archivos importantes...")
        # Buscar archivos importantes
        archivos_config = encontrar_archivos("*.json", ".")
        archivos_python = encontrar_archivos("*.py", ".")
        archivos_readme = encontrar_archivos("README*", ".")
        archivos_typescript = encontrar_archivos("**/*.ts", ".")
        archivos_react = encontrar_archivos("**/*.tsx", ".")
        
        # Generar contenido del documento
        contenido = f"""# An√°lisis del Repositorio

*Documento generado autom√°ticamente el {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*

**Repositorio analizado:** `{repo_path}`

## üìä Estad√≠sticas Generales

{stats}

## üìÅ Estructura Principal

{estructura}

## üîß Archivos de Configuraci√≥n

{archivos_config}

## üêç Archivos Python

{archivos_python}

## üìò Archivos TypeScript

{archivos_typescript}

## ‚öõÔ∏è Componentes React

{archivos_react}

## üìñ Documentaci√≥n Existente

{archivos_readme}

## üîç An√°lisis Detallado

### Tecnolog√≠as Detectadas

- **Repositorio objetivo**: {repo_path}
- **An√°lisis autom√°tico**: Herramientas de navegaci√≥n y estad√≠sticas
- **Documentaci√≥n**: Generaci√≥n autom√°tica de manuales funcionales

### Arquitectura del An√°lisis

Este an√°lisis fue realizado por un agente automatizado que:

1. **Exploraci√≥n**: Navega por la estructura del repositorio
2. **An√°lisis**: Examina archivos y extrae informaci√≥n relevante
3. **Documentaci√≥n**: Genera manuales funcionales orientados al negocio
4. **Estad√≠sticas**: Proporciona m√©tricas del c√≥digo

### Pr√≥ximos Pasos

- ‚úÖ An√°lisis de estructura completado
- üîÑ An√°lisis funcional por m√≥dulos en progreso
- üìù Generaci√≥n de documentaci√≥n espec√≠fica por funcionalidad

---

*Este documento fue generado autom√°ticamente por el agente de an√°lisis de c√≥digo.*
"""
        
        logger.debug("‚úçÔ∏è Escribiendo archivo de documentaci√≥n...")
        # Escribir el archivo
        resultado_escritura = escribir_markdown(nombre_archivo, contenido, sobrescribir=True)
        
        logger.info("‚úÖ Documentaci√≥n del repositorio creada exitosamente")
        
        return f"üìã Documentaci√≥n del repositorio creada:\n\n{resultado_escritura}"
        
    except Exception as e:
        logger.error(f"‚ùå Error al crear documentaci√≥n: {str(e)}")
        return f"Error al crear documentaci√≥n del repositorio: {str(e)}"


@tool
def crear_reporte_analisis(titulo: str, contenido_analisis: str, ruta_archivo: str = None) -> str:
    """
    Crea un reporte de an√°lisis en formato Markdown con estructura profesional.
    
    Args:
        titulo: T√≠tulo del reporte de an√°lisis.
        contenido_analisis: Contenido principal del an√°lisis.
        ruta_archivo: Ruta del archivo (opcional, se genera autom√°ticamente si no se proporciona).
        
    Returns:
        String confirmando la creaci√≥n del reporte.
    """
    try:
        # Generar nombre de archivo autom√°ticamente si no se proporciona
        if ruta_archivo is None:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            titulo_archivo = titulo.lower().replace(' ', '_').replace('/', '_')
            ruta_archivo = f"reporte_{titulo_archivo}_{timestamp}.md"
        
        # Generar contenido del reporte
        contenido = f"""# {titulo}

**Fecha de an√°lisis**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**Generado por**: Agente de An√°lisis de C√≥digo

---

## üìã Resumen Ejecutivo

{contenido_analisis}

## üîç Detalles del An√°lisis

### Metodolog√≠a

Este an√°lisis fue realizado utilizando:
- B√∫squeda sem√°ntica en base de datos vectorial
- An√°lisis est√°tico de c√≥digo
- Exploraci√≥n sistem√°tica del repositorio
- Herramientas automatizadas de an√°lisis

### Hallazgos Principales

{contenido_analisis}

## üìä M√©tricas y Estad√≠sticas

*Las m√©tricas espec√≠ficas se incluyen en el contenido del an√°lisis arriba.*

## üéØ Conclusiones

Este reporte proporciona una visi√≥n detallada basada en el an√°lisis automatizado del c√≥digo y la estructura del repositorio.

## üìù Notas Adicionales

- Este reporte fue generado autom√°ticamente
- Para an√°lisis m√°s espec√≠ficos, consulte con el agente usando consultas dirigidas
- Los resultados se basan en el estado actual del repositorio

---

*Reporte generado por el Sistema de An√°lisis de C√≥digo Automatizado*
"""
        
        # Escribir el archivo
        resultado_escritura = escribir_markdown(ruta_archivo, contenido, sobrescribir=True)
        
        return f"üìä Reporte de an√°lisis creado:\n\n{resultado_escritura}"
        
    except Exception as e:
        return f"Error al crear reporte de an√°lisis: {str(e)}"


@tool
def agregar_contenido_markdown(ruta_archivo: str, nuevo_contenido: str, posicion: str = "final") -> str:
    """
    Agrega contenido a un archivo Markdown existente.
    
    Args:
        ruta_archivo: Ruta al archivo Markdown existente.
        nuevo_contenido: Contenido a agregar al archivo.
        posicion: D√≥nde agregar el contenido ("inicio", "final").
        
    Returns:
        String confirmando la adici√≥n del contenido.
    """
    try:
        archivo_path = Path(ruta_archivo)
        
        # Verificar que el archivo existe
        if not archivo_path.exists():
            return f"Error: El archivo '{ruta_archivo}' no existe."
        
        # Verificar que es un archivo Markdown
        if archivo_path.suffix.lower() != '.md':
            return f"Error: El archivo debe ser .md, encontrado: {archivo_path.suffix}"
        
        # Leer contenido existente
        with open(archivo_path, 'r', encoding='utf-8') as file:
            contenido_existente = file.read()
        
        # Agregar nuevo contenido seg√∫n la posici√≥n
        if posicion.lower() == "inicio":
            contenido_final = nuevo_contenido + "\n\n" + contenido_existente
        else:  # final por defecto
            contenido_final = contenido_existente + "\n\n" + nuevo_contenido
        
        # Escribir el contenido actualizado
        with open(archivo_path, 'w', encoding='utf-8') as file:
            file.write(contenido_final)
        
        # Obtener informaci√≥n actualizada
        tama√±o = archivo_path.stat().st_size
        lineas = contenido_final.count('\n') + 1
        
        resultado = f"‚úÖ Contenido agregado exitosamente:\n\n"
        resultado += f"üìÑ Archivo: {ruta_archivo}\n"
        resultado += f"üìè Nuevo tama√±o: {tama√±o} bytes\n"
        resultado += f"üìù L√≠neas totales: {lineas}\n"
        resultado += f"üìç Posici√≥n: {posicion}\n"
        resultado += f"üïí Actualizado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        
        return resultado
        
    except PermissionError:
        return f"Error: Sin permisos para modificar '{ruta_archivo}'."
    except Exception as e:
        return f"Error inesperado al agregar contenido a '{ruta_archivo}': {str(e)}"


@tool
def crear_indice_archivos(directorio_base: str = ".", patron_archivos: str = "*.md", nombre_indice: str = "INDICE.md") -> str:
    """
    Crea un √≠ndice de archivos Markdown en el directorio especificado.
    
    Args:
        directorio_base: Directorio donde buscar archivos.
        patron_archivos: Patr√≥n de archivos a incluir en el √≠ndice.
        nombre_indice: Nombre del archivo de √≠ndice a crear.
        
    Returns:
        String confirmando la creaci√≥n del √≠ndice.
    """
    try:
        from tools.navegacion import encontrar_archivos
        
        # Buscar archivos que coincidan con el patr√≥n
        archivos_encontrados = encontrar_archivos(patron_archivos, directorio_base)
        
        # Generar contenido del √≠ndice
        contenido = f"""# √çndice de Archivos

*√çndice generado autom√°ticamente el {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*

## üìö Archivos Encontrados

Patr√≥n de b√∫squeda: `{patron_archivos}`  
Directorio base: `{directorio_base}`

{archivos_encontrados}

## üîó Enlaces R√°pidos

"""
        
        # Agregar enlaces a los archivos encontrados (si es posible extraerlos)
        base_path = Path(directorio_base)
        try:
            archivos = list(base_path.glob(patron_archivos))
            if archivos:
                contenido += "### Archivos de Documentaci√≥n\n\n"
                for archivo in archivos:
                    if archivo.name != nombre_indice:  # No incluir el propio √≠ndice
                        ruta_relativa = archivo.relative_to(base_path)
                        nombre_sin_extension = archivo.stem.replace('_', ' ').replace('-', ' ').title()
                        contenido += f"- [{nombre_sin_extension}]({ruta_relativa})\n"
        except:
            pass
        
        contenido += f"""

---

*Este √≠ndice fue generado autom√°ticamente por el agente de an√°lisis de c√≥digo.*
*Para actualizar este √≠ndice, ejecuta nuevamente la herramienta crear_indice_archivos.*
"""
        
        # Escribir el archivo de √≠ndice
        resultado_escritura = escribir_markdown(nombre_indice, contenido, sobrescribir=True)
        
        return f"üìë √çndice de archivos creado:\n\n{resultado_escritura}"
        
    except Exception as e:
        return f"Error al crear √≠ndice de archivos: {str(e)}" 